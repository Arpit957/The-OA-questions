#include <iostream>
#include <vector>

using namespace std;

vector<int> findArrayQuadruplet(const vector<int> &arr, int s) 
{
  // your code goes here
  
 /* 
  2  4  9  5
  7 9 1 3
   7 4 0 9
    
     0 4 7 9
    n 
      n 
        n
  */
  
  int n = arr.size();
  
  vector<int>a;
  for(auto i:arr){
    a.push_back(i);
  }
  
  vector<int>ans;
  
  if(n < 4){
    return ans;
  }
  
  sort(a.begin(),a.end());
  
  for(int first = 0 ; first < n-3 ; first++){
    for(int second =  first + 1 ; second < n - 2 ; second++){
     
      int new_target = s - (a[first] + a[second]);
      
      int start = second + 1;
      int end = n - 1;
      
      while(start < end){
        if(a[start] + a[end] == new_target) {
          return {a[first],a[second],a[start],a[end]};
        }
        else if(a[start] + a[end] < new_target){
          start++;
        }
        else {
          end --;
        }
      }    
    }
    
  }
  return {};
  /*
    O(N^4)
    O(1);
  
  o to n
    1 to n -1
    target
    target - arr[i] - arr[j];
    */
}

int main() {
  return 0;
}
