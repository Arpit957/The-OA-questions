
  /*
  i am at left corner (0,0);
  i have to reach top right (n-1,n-1);
  
  2 possibilites
     north (row+1,col);
    east(row,col+1);
  
   */
  
  //ATQ
 // 2 options;
  //current state : 2 states
    
    //base cond
    /*
    if( i == n -1 and j == n-1)
      return 1;
  */
    //return solve(0,0,n);
  
  
    //start form n-1 , 0 to n

#include <iostream>
#include<vector>
using namespace std;

https://www.linkedin.com/in/saiakshitharthi/
int solve(int row ,int col , int n){
  if(row == n-1 and col == n-1)return 1;
  
  if(row >= n or row < 0 or col>=n or col<0 or row < col)return 0;
  
  return solve(row+1,col,n) + solve(row,col+1,n);
}
int numOfPathsToDest( int n ) 
{
  // your code goes here
      
      vector<vector<int>>paths(n,vector<int>(n,0));
  
   // paths[i][j] == says the distinct number of ways we can reach (i,j);
  
  for(int i = 0;i<n;i++){
    paths[n-1][i] = 1;
  }
  //prev and next
  for(int i = n - 2; i>=0 ;i--){
    for(int j = i ;j >= 0;j--){
      paths[i][j] = paths[i+1][j] + paths[i][j+1];
    }
  }
  return paths[0][0];
}

// TC : 2^n2 === n^2
//SC : recursive stack 
https://cses.fi/problemset/task/2187

int main() {
  return 0;
}
